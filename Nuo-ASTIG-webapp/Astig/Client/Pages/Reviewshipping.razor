@page "/reviewshipping"
@inject ICartService CartService
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject IVoucherService VoucherService
@inject IToastService ToastService
@inject NavigationManager NavigationManager


<input type="text" id="Total" value="@totalbind" hidden>


<h5>Here's what you'll get:</h5>
<div>
    @foreach (var item in cartItems)
    {
        <div class="item-container">
            <div class="item-image-wrapper"><img src="@item.Image" class="item-image" /></div>
            <div class="item-name">
                <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
                <span>@item.Quantity x</span><br />
            </div>
            <div class="item-price">₱ @(item.Price * item.Quantity)</div>
        </div>}
    <div class="text-xl-right text-primary">
        Order total (@cartItems.Count): ₱ @cartItems.Sum(item => item.Price * item.Quantity)
        <br />
        Transaction fee (2%):₱ @comibind
        <br />
        @discounterstatement
        <br />
        Shipping fee: ₱ @shippingbind
        <br />
        <span class="text-success"> Total: ₱ @totalbind</span>
    </div>
</div>

<hr />
<br />
<h6>Voucher Code:</h6>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <button class="btn btn-primary" type="button" @onclick="gg">Apply</button>
    </div>
    <input type="text" class="form-control" @bind="@vouchercode" placeholder="" aria-label="" aria-describedby="basic-addon1">
</div>
<br />
<br />
<div>
    <h6>Shipping Address:</h6>
    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <button class="btn btn-primary" disabled="@IsDisabled" type="button" @onclick="w">Pay via <b>COD</b></button>
        </div>
        <input type="text" class="form-control" @bind="@shipping" placeholder="" aria-label="" aria-describedby="basic-addon1">
    </div>
</div>
<br />
<br />
<br />



<div id="smart-button-container">
    <div style="text-align: center;">
        <div id="paypal-button-container"></div>
    </div>
</div>


@code {
    bool IsDisabled;
    List<CartItem> cartItems = new List<CartItem>();
    BlazingShop.Shared.Voucher xvoucher = new BlazingShop.Shared.Voucher();

    decimal totalbind, shippingbind, comibind;
    string discounterstatement = "";
    public string vouchercode;
    string shipping;

    protected override async Task OnInitializedAsync()
    {
        string pnp;
        pnp = await LocalStorage.GetItemAsync<string>("PNP");
        if (pnp != "C")
        {
            NavigationManager.NavigateTo("login");
        }

        //initiate value
        shipping = await LocalStorage.GetItemAsync<string>("credadd");
        cartItems = await CartService.GetCartItems();

        //COD Button Disabler
        string nc = null;
        int tc = 0;
        foreach (var t in cartItems.Where(n => n.Istan == false))
        {
            nc = nc + t.ProductTitle + "\n";
            tc++;
        }

        if (nc != null)
        {
            if (tc == cartItems.Count)
            {
                IsDisabled = true;
                decimal x = Math.Round(cartItems.Sum(item => item.Price * item.Quantity), 2);
                comibind = Math.Round(0.02m * x, 2);
                shippingbind = 0;
                totalbind = Math.Round(x + comibind + shippingbind, 2); StateHasChanged();
                ToastService.ShowSuccess("Non-shippable product Checkout.", "COD DISABLED");

            }
            else
            {
                IsDisabled = true;
                StateHasChanged();
                decimal x = Math.Round(cartItems.Sum(item => item.Price * item.Quantity), 2);
                comibind = Math.Round(0.02m * x, 2);
                shippingbind = 0;
                totalbind = Math.Round(x + comibind + shippingbind, 2); StateHasChanged();
                ToastService.ShowSuccess("Non-shippable product Checkout.", "COD DISABLED");
            }
        }
        else { IsDisabled = false;
            decimal x = Math.Round(cartItems.Sum(item => item.Price * item.Quantity), 2);
            comibind = Math.Round(0.02m * x, 2);
            shippingbind = 100;
            totalbind = Math.Round(x + comibind + shippingbind, 2);
            StateHasChanged();
        }

        //*********************COD Button Disabler





        //locs
        await LocalStorage.SetItemAsync<decimal>("chunkover", totalbind);
        await LocalStorage.SetItemAsync<decimal>("chunktot", comibind);
        await LocalStorage.SetItemAsync<string>("chunkvouch", "None");
        await LocalStorage.SetItemAsync<string>("chunkadd", shipping);
        await LocalStorage.SetItemAsync<string>("chunkmode", "Paypal");
        await LocalStorage.SetItemAsync<bool>("xxx", true);

    }


    //paypal--------------------------------
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initPayPalButton");
            StateHasChanged();

        }

    }//paypal--------------------------------

    //COD BUTTON
    private async void w()
    {

        //locs
        decimal x = Math.Round(cartItems.Sum(item => item.Price * item.Quantity), 2);
        await LocalStorage.SetItemAsync<decimal>("chunkover", totalbind);
        await LocalStorage.SetItemAsync<decimal>("chunktot", comibind);
        await LocalStorage.SetItemAsync<string>("chunkvouch", xvoucher.Type);
        await LocalStorage.SetItemAsync<string>("chunkadd", shipping);
        await LocalStorage.SetItemAsync<string>("chunkmode", "COD");
        NavigationManager.NavigateTo("complete");
        await LocalStorage.SetItemAsync<bool>("xxx", true);
    }




    public async void gg()
    {
        try
        {
            xvoucher = await VoucherService.CheckVouch(vouchercode);
            Console.WriteLine(xvoucher.Value);
            if (xvoucher.Type == "Free Shipping" && IsDisabled==false)
            {
                discounterstatement = "Free Shipping Voucher Applied";
                decimal x = Math.Round(cartItems.Sum(item => item.Price * item.Quantity), 2);
                comibind = Math.Round(0.02m * x, 2);
                shippingbind = 0;
                totalbind = Math.Round(x + comibind + shippingbind, 2);
                Console.WriteLine(discounterstatement);
                ToastService.ShowSuccess("Free Shipping yay!", "VOUCHER APPLIED!");
                //locs
                await LocalStorage.SetItemAsync<decimal>("chunkover", totalbind);
                await LocalStorage.SetItemAsync<decimal>("chunktot", comibind);
                await LocalStorage.SetItemAsync<string>("chunkvouch", "Free Shipping");
                await LocalStorage.SetItemAsync<string>("chunkadd", shipping);
                await LocalStorage.SetItemAsync<string>("chunkmode", "Paypal");


                StateHasChanged();


            }
            else if (xvoucher.Type == "Personal Code")
            {
                discounterstatement = "" + xvoucher.Type;
                decimal x = Math.Round(cartItems.Sum(item => item.Price * item.Quantity), 2);
                comibind = Math.Round(0.02m * x, 2);
                //shippingbind = 100;
                decimal y = Math.Round(x * xvoucher.Value, 2);
                totalbind = Math.Round(x + comibind + shippingbind, 2);
                discounterstatement = discounterstatement + " - " + "Saved: ₱" + y;
                totalbind = Math.Round(totalbind - y, 2);
                Console.WriteLine(discounterstatement);
                ToastService.ShowSuccess("Save" + "₱" + y, "VOUCHER APPLIED!");


                //locs
                await LocalStorage.SetItemAsync<decimal>("chunkover", totalbind);
                await LocalStorage.SetItemAsync<decimal>("chunktot", comibind);
                await LocalStorage.SetItemAsync<string>("chunkvouch", xvoucher.Type);
                await LocalStorage.SetItemAsync<string>("chunkadd", shipping);
                await LocalStorage.SetItemAsync<string>("chunkmode", "Paypal");
                await LocalStorage.SetItemAsync<string>("voucheroffer", vouchercode);
                StateHasChanged();

            }
            else
            {
                discounterstatement = "" + xvoucher.Type;
                decimal x = Math.Round(cartItems.Sum(item => item.Price * item.Quantity), 2);
                comibind = Math.Round(0.02m * x, 2);
                //shippingbind = 100;
                decimal y = Math.Round(x * xvoucher.Value, 2);
                totalbind = Math.Round(x + comibind + shippingbind, 2);
                discounterstatement = discounterstatement + " - " + "Saved: ₱" + y;
                totalbind = Math.Round(totalbind - y, 2);
                Console.WriteLine(discounterstatement);
                ToastService.ShowSuccess("Save" + "₱" + y, "VOUCHER APPLIED!");


                //locs
                await LocalStorage.SetItemAsync<decimal>("chunkover", totalbind);
                await LocalStorage.SetItemAsync<decimal>("chunktot", comibind);
                await LocalStorage.SetItemAsync<string>("chunkvouch", xvoucher.Type);
                await LocalStorage.SetItemAsync<string>("chunkadd", shipping);
                await LocalStorage.SetItemAsync<string>("chunkmode", "Paypal");

                StateHasChanged();
            }
        }
        catch
        {

            Console.WriteLine("ERROR");
            ToastService.ShowError("Please try again & double check", "VOUCHER INVALID");
        }
    }










}
